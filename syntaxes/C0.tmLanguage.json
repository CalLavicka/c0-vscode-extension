{
  "scopeName": "source.c0",
  "fileTypes": [
    "c0","c1"
  ],
  "version": "",
  "information_for_contributors": [
    "This code was auto generated by a much-more-readble ruby file",
    "This file essentially an updated/improved fork of the atom syntax",
    "see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master"
  ],
  "patterns": [
    {
      "begin":"#use",
      "beginCaptures":{"0": {"name":"keyword.control"}},
      "end":"($\n?)",
      "name":"keyword.other.library"
    }, 
    {
      "begin":"([ \t]*\/[*]@[ ]*(ensures|requires|loop_invariant|assert))",
      "beginCaptures":{"0": {"name":"comment.block"},
        "1": {"name":"comment.block.contract"},
        "2": {"name":"keyword.control.contract"}},
      "end":"[ \t]*((@[*]\/))",
      "endCaptures":{
        "1": {"name": "punctuation.definition.comment.end"},
        "2": {"name": "comment.block.contract"}},
      "name":"meta.contract.block",
      "patterns":[
        {"match":"@","name":"comment.block.contract"}, 
        {"include":"#contract_innards"},
        {"include":"#block_innards"}
      ]
    },
    {
      "match":"@",
      "name":"comment.block.contract"
    },
    {
      "begin":"([ \t]*\/\/@[ ]*(ensures|requires|loop_invariant|assert))",
      "beginCaptures":{"0": {"name":"comment.line"},
        "1": {"name":"comment.line.contract"},
        "2": {"name":"keyword.control.contract"}},
      "end":"($[;]?[\n]?)",
      "name":"meta.contract.line",
      "patterns":[
        {"match":"(;\\\n)","name:":"punctuation.separator.continuation"},
        {"include":"#contract_innards"},
        {"include":"#block_innards"}
      ]
    },
    {
      "match":"\\\\result",
      "name":"comment.result"
    },
    {
      "match":"\\\\length",
      "name":"comment.length"
    },
    {
      "begin":"(struct)\\s([.]*\\s*){",
      "beginCaptures":{"1": {"name":"keyword.control"}},
      "end":"(};)",
      "patterns":[
        {"include":"#block_innards"}
      ]
    },
    {
      "include": "#comments"
    },
    {
      "match": "\\b(break|continue|do|else|for|if|return|while|alloc|alloc_array|assert)\\b",
      "name": "keyword.control"
    },
    {
      "include": "#storage_types"
    },
    {
      "match": "typedef",
      "name": "keyword.other.typedef"
    },
    {
      "match": "\\bk[A-Z]\\w*\\b",
      "name": "constant.other.variable.mac-classic"
    },
    {
      "match": "\\bg[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.global.mac-classic"
    },
    {
      "match": "\\bs[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.static.mac-classic"
    },
    {
      "match": "\\b(NULL|true|false)\\b",
      "name": "constant.language"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#block"
    },
    {
      "include": "#parens"
    },
    {
      "name": "meta.function",
      "begin": "(?<!\\w)(?!\\s*(?:while|for|do|if|else|return|break|continue|void|char|string|int|bool|alloc|alloc_array|assert)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#function-innards"
        }
      ]
    },
    {
      "include": "#line_continuation_character"
    },
    {
      "name": "storage.modifier.array.bracket.square",
      "match": "\\[[ ]*\\]"
    },
    {
      "name": "meta.bracket.square.access",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
      "beginCaptures": {
        "1": {
          "name": "variable.object"
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.end.bracket.square"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    {
      "match": ";",
      "name": "punctuation.terminator.statement"
    },
    {
      "match": ",",
      "name": "punctuation.separator.delimiter"
    }
  ],
  "repository": {
    "contract_innards": {
      "begin":"(ensures|requires|loop_invariant|assert)", 
      "beginCaptures":{"1": {"name":"keyword.control.contract"}},
      "end":"([;]?[\n]?)",
      "name":"meta.contract.line",
      "patterns":[
        {"match":"(;\\\n)","name:":"punctuation.separator.continuation"},
        {"include":"#block_innards"}
      ]
    },
    "inline_comment": {
      "match": "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))",
      "captures": {
        "1": {
          "name": "comment.block punctuation.definition.comment.begin"
        },
        "2": {
          "name": "comment.block"
        },
        "3": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block punctuation.definition.comment.end"
            },
            {
              "match": "\\*",
              "name": "comment.block"
            }
          ]
        }
      }
    },
    "static_assert": {
      "begin": "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((?<!\\w)static_assert|_Static_assert(?!\\w))((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))(\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block punctuation.definition.comment.begin"
        },
        "3": {
          "name": "comment.block"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block punctuation.definition.comment.end"
            },
            {
              "match": "\\*",
              "name": "comment.block"
            }
          ]
        },
        "5": {
          "name": "keyword.other.static_assert"
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block punctuation.definition.comment.begin"
        },
        "8": {
          "name": "comment.block"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block punctuation.definition.comment.end"
            },
            {
              "match": "\\*",
              "name": "comment.block"
            }
          ]
        },
        "10": {
          "name": "punctuation.section.arguments.begin.bracket.round.static_assert"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.static_assert"
        }
      },
      "patterns": [
        {
          "name": "meta.static_assert.message",
          "begin": "(,)\\s*(?=(?:L|u8|u|U\\s*\\\")?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.delimiter.comma"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#string_context"
            }
          ]
        },
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "backslash_escapes": {
      "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
      "name": "constant.character.escape"
    },
    "c_conditional_context": {
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "evalutation_context": {
      "patterns": [
        {
          "include": "#function-call-innards"
        },
        {
          "include": "$base"
        }
      ]
    },
    "member_access": {
      "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b(?!(?:void|char|string|int|bool)\\b)[a-zA-Z_]\\w*\\b(?!\\())",
      "captures": {
        "1": {
          "name": "variable.other.object.access"
        },
        "2": {
          "name": "punctuation.separator.dot-access"
        },
        "3": {
          "name": "punctuation.separator.pointer-access"
        },
        "4": {
          "patterns": [
            {
              "include": "#member_access"
            },
            {
              "include": "#method_access"
            },
            {
              "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.other.object.access"
                },
                "2": {
                  "name": "punctuation.separator.dot-access"
                },
                "3": {
                  "name": "punctuation.separator.pointer-access"
                }
              }
            }
          ]
        },
        "5": {
          "name": "variable.other.member"
        }
      }
    },
    "method_access": {
      "contentName": "meta.function-call.member",
      "begin": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object.access"
        },
        "2": {
          "name": "punctuation.separator.dot-access"
        },
        "3": {
          "name": "punctuation.separator.pointer-access"
        },
        "4": {
          "patterns": [
            {
              "include": "#member_access"
            },
            {
              "include": "#method_access"
            },
            {
              "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.other.object.access"
                },
                "2": {
                  "name": "punctuation.separator.dot-access"
                },
                "3": {
                  "name": "punctuation.separator.pointer-access"
                }
              }
            }
          ]
        },
        "5": {
          "name": "entity.name.function.member"
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "numbers": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.hexadecimal"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.hexadecimal"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.hexadecimal"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.hexadecimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.point"
                    },
                    "5": {
                      "name": "constant.numeric.decimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.decimal"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.decimal"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.decimal"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.decimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary"
                    },
                    "2": {
                      "name": "constant.numeric.binary",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer"
                    }
                  }
                },
                {
                  "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal"
                    },
                    "2": {
                      "name": "constant.numeric.octal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.hexadecimal"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.hexadecimal"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.hexadecimal"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.hexadecimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.decimal"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.decimal"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.decimal"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.decimal",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                  "name": "invalid.illegal.constant.numeric"
                }
              ]
            }
          ]
        }
      }
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.documentation",
          "while": "(?-mix:(?:^)(?>\\s*)(\\/\\/[!\\/]+))",
          "whileCaptures": {
            "1": {
              "name": "punctuation.definition.comment.continuation.documentation"
            }
          },
          "begin": "(\\/\\/[!\\/]+)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.documentation"
            }
          }
        },
        {
          "match": "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation"
            },
            "3": {
              "name": "punctuation.definition.comment.end.documentation"
            }
          },
          "name": "comment.block.documentation"
        },
        {
          "name": "comment.block.documentation",
          "begin": "(\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation"
            }
          },
          "end": "([!*]*\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.documentation"
            }
          },
          "patterns": [
            {
              "while": "(?-mix:(?:^)(?>\\s*)(?![!*]*\\*\\/)((?>\\**)))",
              "whileCaptures": {
                "1": {
                  "name": "punctuation.definition.comment.continuation.documentation"
                }
              }
            }
          ]
        },
        {
          "match": "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block"
            }
          },
          "name": "comment.block.banner"
        },
        {
          "name": "comment.block",
          "begin": "(\\/\\*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin"
            }
          },
          "end": "(\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end"
            }
          }
        },
        {
          "match": "^\\/\\/ =(\\s*.*?)\\s*=$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line"
            }
          },
          "name": "comment.line.banner"
        },
        {
          "begin": "((?:^[ \\t]+)?)(?=\\/\\/)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-slash",
              "begin": "(\\/\\/)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.comment"
                }
              },
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#line_continuation_character"
                }
              ]
            }
          ]
        }
      ]
    },
    "probably_a_parameter": {
      "match": "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
      "captures": {
        "1": {
          "name": "variable.parameter.probably"
        }
      }
    },
    "access-method": {
      "name": "meta.function-call.member",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.object"
        },
        "2": {
          "name": "punctuation.separator.dot-access"
        },
        "3": {
          "name": "punctuation.separator.pointer-access"
        },
        "4": {
          "patterns": [
            {
              "match": "\\.",
              "name": "punctuation.separator.dot-access"
            },
            {
              "match": "->",
              "name": "punctuation.separator.pointer-access"
            },
            {
              "match": "[a-zA-Z_][a-zA-Z_0-9]*",
              "name": "variable.object"
            },
            {
              "name": "everything.else",
              "match": ".+"
            }
          ]
        },
        "5": {
          "name": "entity.name.function.member"
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "block": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:else)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly"
            }
          },
          "name": "meta.block",
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "#c_function_call"
        },
        {
          "name": "meta.initialization",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other"
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:else)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "include": "#parens-block"
        },
        {
          "include": "$base"
        }
      ]
    },
    "c_function_call": {
      "begin": "(?x)\n(?!(?:while|for|do|if|else|return|alloc|alloc_array|assert)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function-call",
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "line_continuation_character": {
      "patterns": [
        {
          "match": "(\\\\)\\n",
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation"
            }
          }
        }
      ]
    },
    "parens": {
      "name": "meta.parens",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "parens-block": {
      "name": "meta.parens.block",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round"
        }
      },
      "patterns": [
        {
          "include": "#block_innards"
        },
        {
          "match": "(?-mix:(?<!:):(?!:))",
          "name": "punctuation.range-based"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "--",
          "name": "keyword.operator.decrement"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment"
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator"
        },
        {
          "begin": "(\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary"
            }
          },
          "end": "(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end"
            }
          },
          "name": "string.quoted.double",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end"
            }
          },
          "name": "string.quoted.single",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape"
        }
      ]
    },
    "string_placeholder": {
      "patterns": [
        {
          "match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
          "name": "constant.other.placeholder"
        },
        {
          "match": "(%)(?!\"\\s*(PRI|SCN))",
          "captures": {
            "1": {
              "name": "invalid.illegal.placeholder"
            }
          }
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "match": "(?-mix:(?<!\\w)(?:void|char|string|int|bool)(?!\\w))",
          "name": "storage.type.built-in.primitive"
        },
        {
          "match": "(?-mix:\\b(struct)\\b)",
          "name": "storage.type.$1"
        },
        {
          "name": "meta.asm",
          "begin": "(\\b(?:__asm__|asm)\\b)\\s*((?:volatile)?)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "storage.type.asm"
            },
            "2": {
              "name": "storage.modifier"
            },
            "3": {
              "name": "punctuation.section.parens.begin.bracket.round.assembly"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.bracket.round.assembly"
            }
          },
          "patterns": [
            {
              "name": "string.quoted.double",
              "contentName": "meta.embedded.assembly",
              "begin": "(R?)(\")",
              "beginCaptures": {
                "1": {
                  "name": "meta.encoding"
                },
                "2": {
                  "name": "punctuation.definition.string.begin.assembly"
                }
              },
              "end": "(\")",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.string.end.assembly"
                }
              },
              "patterns": [
                {
                  "include": "source.asm"
                },
                {
                  "include": "source.x86"
                },
                {
                  "include": "source.x86_64"
                },
                {
                  "include": "source.arm"
                },
                {
                  "include": "#backslash_escapes"
                },
                {
                  "include": "#string_escaped_char"
                },
                {
                  "match": "(?=not)possible"
                }
              ]
            },
            {
              "begin": "(\\()",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.section.parens.begin.bracket.round.assembly.inner"
                }
              },
              "end": "(\\))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.parens.end.bracket.round.assembly.inner"
                }
              },
              "patterns": [
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            {
              "match": ":",
              "name": "punctuation.separator.delimiter.colon.assembly"
            },
            {
              "include": "#comments_context"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "function-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "name": "meta.function.definition.parameters",
          "begin": "(?x)\n(?!(?:while|for|do|if|else|alloc|alloc_array)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function"
            },
            "2": {
              "name": "punctuation.section.parameters.begin.bracket.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parameters.end.bracket.round"
            }
          },
          "patterns": [
            {
              "include": "#probably_a_parameter"
            },
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round"
            }
          },
          "patterns": [
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "include": "$base"
        }
      ]
    },
    "function-call-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|return|alloc|alloc_array|assert)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "include": "#block_innards"
        }
      ]
    }
  },
  "name": "C0"
}