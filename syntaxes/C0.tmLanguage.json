{
  "scopeName": "source.c0",
  "fileTypes": [
    "c0","c1"
  ],
  "version": "",
  "information_for_contributors": [
    "This code was auto generated by a much-more-readble ruby file",
    "This file essentially an updated/improved fork of the atom syntax",
    "see https://github.com/jeff-hykin/cpp-textmate-grammar/blob/master"
  ],
  "patterns": [
    {"begin":"[ \t]*(\/.)@(ensures|requires|loop_invariant|assert)",
      "beginCaptures":{"0": {"name":"comment.block.c"},
        "1": {"name":"punctuation.definition.comment.c"},
        "2": {"name":"keyword.control"}},
      "end":"[ \t]*@(.\/)",
      "endCaptures":{"1": {"name": "punctuation.definition.comment.end.c"}},
      "name":"meta.contract.block.c",
      "patterns":[{"match":"@","name":"comment.block.c"},
        {"include":"#block_innards"}]},
    {"begin":"([ \t]*\/\/)@(ensures|requires|loop_invariant|assert)",
      "beginCaptures":{"0": {"name":"comment.line.c"},
        "1": {"name":"punctuation.definition.comment.c"},
        "2": {"name":"keyword.control"}},
      "end":"($\n?)",
      "name":"meta.contract.line.c",
      "patterns":[{"match":"(;\\\n)","name:":"punctuation.separator.continuation.c++"},
      {"include":"#block_innards"}]},
    {
      "include": "#preprocessor-rule-enabled"
    },
    {
      "include": "#preprocessor-rule-disabled"
    },
    {
      "include": "#preprocessor-rule-conditional"
    },
    {
      "include": "#predefined_macros"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#switch_statement"
    },
    {
      "match": "\\b(break|continue|do|else|for|goto|if|_Pragma|return|while)\\b",
      "name": "keyword.control.c"
    },
    {
      "include": "#storage_types"
    },
    {
      "match": "typedef",
      "name": "keyword.other.typedef.c"
    },
    {
      "match": "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
      "name": "storage.modifier.c"
    },
    {
      "match": "\\bk[A-Z]\\w*\\b",
      "name": "constant.other.variable.mac-classic.c"
    },
    {
      "match": "\\bg[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.global.mac-classic.c"
    },
    {
      "match": "\\bs[A-Z]\\w*\\b",
      "name": "variable.other.readwrite.static.mac-classic.c"
    },
    {
      "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
      "name": "constant.language.c"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#strings"
    },
    {
      "name": "meta.preprocessor.macro.c",
      "begin": "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((#)\\s*define\\b)\\s+((?<!\\w)[a-zA-Z_]\\w*(?!\\w))(?:(\\()([^()\\\\]+)(\\)))?",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "3": {
          "name": "comment.block.c"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        },
        "5": {
          "name": "keyword.control.directive.define.c"
        },
        "6": {
          "name": "punctuation.definition.directive.c"
        },
        "7": {
          "name": "entity.name.function.preprocessor.c"
        },
        "8": {
          "name": "punctuation.definition.parameters.begin.c"
        },
        "9": {
          "patterns": [
            {
              "match": "(?<=[(,])\\s*((?<!\\w)[a-zA-Z_]\\w*(?!\\w))\\s*",
              "captures": {
                "1": {
                  "name": "variable.parameter.preprocessor.c"
                }
              }
            },
            {
              "match": ",",
              "name": "punctuation.separator.parameters.c"
            },
            {
              "match": "\\.\\.\\.",
              "name": "ellipses.c punctuation.vararg-ellipses.variable.parameter.preprocessor.c"
            }
          ]
        },
        "10": {
          "name": "punctuation.definition.parameters.end.c"
        }
      },
      "end": "(?<!\\\\)(?=\\n)",
      "patterns": [
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    {
      "begin": "^\\s*((#)\\s*(error|warning))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.diagnostic.$3.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.diagnostic.c",
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "[^'\"]",
          "end": "(?<!\\\\)(?=\\s*\\n)",
          "name": "string.unquoted.single.c",
          "patterns": [
            {
              "include": "#line_continuation_character"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    {
      "begin": "^\\s*((#)\\s*(include(?:_next)?|import))\\b\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.$3.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.include.c",
      "patterns": [
        {
          "include": "#line_continuation_character"
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.include.c"
        },
        {
          "begin": "<",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.other.lt-gt.include.c"
        }
      ]
    },
    {
      "include": "#pragma-mark"
    },
    {
      "begin": "^\\s*((#)\\s*line)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.line.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.c",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "begin": "^\\s*(?:((#)\\s*undef))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.undef.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.c",
      "patterns": [
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.preprocessor.c"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "begin": "^\\s*(?:((#)\\s*pragma))\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.directive.pragma.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
      "name": "meta.preprocessor.pragma.c",
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "match": "[a-zA-Z_$][\\w\\-$]*",
          "name": "entity.other.attribute-name.pragma.preprocessor.c"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#line_continuation_character"
        }
      ]
    },
    {
      "match": "\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\b",
      "name": "support.type.sys-types.c"
    },
    {
      "match": "\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\b",
      "name": "support.type.pthread.c"
    },
    {
      "match": "(?x) \\b\n(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t\n|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t\n|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t\n|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t\n|uintmax_t|uintmax_t)\n\\b",
      "name": "support.type.stdint.c"
    },
    {
      "match": "\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\b",
      "name": "support.constant.mac-classic.c"
    },
    {
      "match": "(?x) \\b\n(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam\n|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr\n|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber\n|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64\n|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32\n|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr\n|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\n\\b",
      "name": "support.type.mac-classic.c"
    },
    {
      "match": "\\b([A-Za-z0-9_]+_t)\\b",
      "name": "support.type.posix-reserved.c"
    },
    {
      "include": "#block"
    },
    {
      "include": "#parens"
    },
    {
      "name": "meta.function.c",
      "begin": "(?<!\\w)(?!\\s*(?:not|compl|sizeof|not_eq|bitand|xor|bitor|and|or|and_eq|xor_eq|or_eq|alignof|alignas|_Alignof|_Alignas|while|for|do|if|else|goto|switch|return|break|case|continue|default|void|char|short|int|signed|unsigned|long|float|double|bool|_Bool|_Complex|_Imaginary|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|NULL|true|false|memory_order|atomic_bool|atomic_char|atomic_schar|atomic_uchar|atomic_short|atomic_ushort|atomic_int|atomic_uint|atomic_long|atomic_ulong|atomic_llong|atomic_ullong|atomic_char16_t|atomic_char32_t|atomic_wchar_t|atomic_int_least8_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_least16_t|atomic_int_least32_t|atomic_uint_least32_t|atomic_int_least64_t|atomic_uint_least64_t|atomic_int_fast8_t|atomic_uint_fast8_t|atomic_int_fast16_t|atomic_uint_fast16_t|atomic_int_fast32_t|atomic_uint_fast32_t|atomic_int_fast64_t|atomic_uint_fast64_t|atomic_intptr_t|atomic_uintptr_t|atomic_size_t|atomic_ptrdiff_t|atomic_intmax_t|atomic_uintmax_t|struct|union|enum|typedef|auto|register|static|extern|thread_local|inline|_Noreturn|const|volatile|restrict|_Atomic)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
      "end": "(?<=\\))",
      "patterns": [
        {
          "include": "#function-innards"
        }
      ]
    },
    {
      "include": "#line_continuation_character"
    },
    {
      "name": "meta.bracket.square.access.c",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
      "beginCaptures": {
        "1": {
          "name": "variable.object.c"
        },
        "2": {
          "name": "punctuation.definition.begin.bracket.square.c"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.end.bracket.square.c"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    {
      "name": "storage.modifier.array.bracket.square.c",
      "match": "\\[\\s*\\]"
    },
    {
      "match": ";",
      "name": "punctuation.terminator.statement.c"
    },
    {
      "match": ",",
      "name": "punctuation.separator.delimiter.c"
    }
  ],
  "repository": {
    "inline_comment": {
      "match": "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))",
      "captures": {
        "1": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "2": {
          "name": "comment.block.c"
        },
        "3": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        }
      }
    },
    "default_statement": {
      "name": "meta.conditional.case.c",
      "begin": "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((?<!\\w)default(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "3": {
          "name": "comment.block.c"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        },
        "5": {
          "name": "keyword.control.default.c"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.default.c"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#c_conditional_context"
        }
      ]
    },
    "case_statement": {
      "name": "meta.conditional.case.c",
      "begin": "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((?<!\\w)case(?!\\w))",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "3": {
          "name": "comment.block.c"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        },
        "5": {
          "name": "keyword.control.case.c"
        }
      },
      "end": "(:)",
      "endCaptures": {
        "1": {
          "name": "punctuation.separator.colon.case.c"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#c_conditional_context"
        }
      ]
    },
    "switch_statement": {
      "name": "meta.block.switch.c",
      "begin": "(((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((?<!\\w)switch(?!\\w)))",
      "beginCaptures": {
        "1": {
          "name": "meta.head.switch.c"
        },
        "2": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "3": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "4": {
          "name": "comment.block.c"
        },
        "5": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        },
        "6": {
          "name": "keyword.control.switch.c"
        }
      },
      "end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
      "patterns": [
        {
          "name": "meta.head.switch.c",
          "begin": "\\G ?",
          "end": "((?:\\{|<%|\\?\\?<|(?=;)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.begin.bracket.curly.switch.c"
            }
          },
          "patterns": [
            {
              "include": "#switch_conditional_parentheses"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.body.switch.c",
          "begin": "(?<=\\{|<%|\\?\\?<)",
          "end": "(\\}|%>|\\?\\?>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.block.end.bracket.curly.switch.c"
            }
          },
          "patterns": [
            {
              "include": "#default_statement"
            },
            {
              "include": "#case_statement"
            },
            {
              "include": "$self"
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "name": "meta.tail.switch.c",
          "begin": "(?<=\\}|%>|\\?\\?>)[\\s\\n]*",
          "end": "[\\s\\n]*(?=;)",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "switch_conditional_parentheses": {
      "name": "meta.conditional.switch.c",
      "begin": "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))(\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "3": {
          "name": "comment.block.c"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        },
        "5": {
          "name": "punctuation.section.parens.begin.bracket.round.conditional.switch.c"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.parens.end.bracket.round.conditional.switch.c"
        }
      },
      "patterns": [
        {
          "include": "#evaluation_context"
        },
        {
          "include": "#c_conditional_context"
        }
      ]
    },
    "static_assert": {
      "begin": "((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))((?<!\\w)static_assert|_Static_assert(?!\\w))((?:(?:(?>\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+?|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z)))(\\()",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "2": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "3": {
          "name": "comment.block.c"
        },
        "4": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        },
        "5": {
          "name": "keyword.other.static_assert.c"
        },
        "6": {
          "patterns": [
            {
              "include": "#inline_comment"
            }
          ]
        },
        "7": {
          "name": "comment.block.c punctuation.definition.comment.begin.c"
        },
        "8": {
          "name": "comment.block.c"
        },
        "9": {
          "patterns": [
            {
              "match": "\\*\\/",
              "name": "comment.block.c punctuation.definition.comment.end.c"
            },
            {
              "match": "\\*",
              "name": "comment.block.c"
            }
          ]
        },
        "10": {
          "name": "punctuation.section.arguments.begin.bracket.round.static_assert.c"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.static_assert.c"
        }
      },
      "patterns": [
        {
          "name": "meta.static_assert.message.c",
          "begin": "(,)\\s*(?=(?:L|u8|u|U\\s*\\\")?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.separator.delimiter.comma.c"
            }
          },
          "end": "(?=\\))",
          "patterns": [
            {
              "include": "#string_context"
            }
          ]
        },
        {
          "include": "#evaluation_context"
        }
      ]
    },
    "backslash_escapes": {
      "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
      "name": "constant.character.escape.c"
    },
    "c_conditional_context": {
      "patterns": [
        {
          "include": "$self"
        },
        {
          "include": "#block_innards"
        }
      ]
    },
    "evalutation_context": {
      "patterns": [
        {
          "include": "#function-call-innards"
        },
        {
          "include": "$base"
        }
      ]
    },
    "member_access": {
      "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b(?!(?:void|char|short|int|signed|unsigned|long|float|double|bool|_Bool|_Complex|_Imaginary|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|memory_order|atomic_bool|atomic_char|atomic_schar|atomic_uchar|atomic_short|atomic_ushort|atomic_int|atomic_uint|atomic_long|atomic_ulong|atomic_llong|atomic_ullong|atomic_char16_t|atomic_char32_t|atomic_wchar_t|atomic_int_least8_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_least16_t|atomic_int_least32_t|atomic_uint_least32_t|atomic_int_least64_t|atomic_uint_least64_t|atomic_int_fast8_t|atomic_uint_fast8_t|atomic_int_fast16_t|atomic_uint_fast16_t|atomic_int_fast32_t|atomic_uint_fast32_t|atomic_int_fast64_t|atomic_uint_fast64_t|atomic_intptr_t|atomic_uintptr_t|atomic_size_t|atomic_ptrdiff_t|atomic_intmax_t|atomic_uintmax_t)\\b)[a-zA-Z_]\\w*\\b(?!\\())",
      "captures": {
        "1": {
          "name": "variable.other.object.access.c"
        },
        "2": {
          "name": "punctuation.separator.dot-access.c"
        },
        "3": {
          "name": "punctuation.separator.pointer-access.c"
        },
        "4": {
          "patterns": [
            {
              "include": "#member_access"
            },
            {
              "include": "#method_access"
            },
            {
              "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.other.object.access.c"
                },
                "2": {
                  "name": "punctuation.separator.dot-access.c"
                },
                "3": {
                  "name": "punctuation.separator.pointer-access.c"
                }
              }
            }
          ]
        },
        "5": {
          "name": "variable.other.member.c"
        }
      }
    },
    "method_access": {
      "contentName": "meta.function-call.member.c",
      "begin": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object.access.c"
        },
        "2": {
          "name": "punctuation.separator.dot-access.c"
        },
        "3": {
          "name": "punctuation.separator.pointer-access.c"
        },
        "4": {
          "patterns": [
            {
              "include": "#member_access"
            },
            {
              "include": "#method_access"
            },
            {
              "match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
              "captures": {
                "1": {
                  "name": "variable.other.object.access.c"
                },
                "2": {
                  "name": "punctuation.separator.dot-access.c"
                },
                "3": {
                  "name": "punctuation.separator.pointer-access.c"
                }
              }
            }
          ]
        },
        "5": {
          "name": "entity.name.function.member.c"
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.c"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.c"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "predefined_macros": {
      "patterns": [
        {
          "match": "\\b(__cplusplus|__DATE__|__FILE__|__LINE__|__STDC__|__STDC_HOSTED__|__STDC_NO_COMPLEX__|__STDC_VERSION__|__STDCPP_THREADS__|__TIME__|NDEBUG|__OBJC__|__ASSEMBLER__|__ATOM__|__AVX__|__AVX2__|_CHAR_UNSIGNED|__CLR_VER|_CONTROL_FLOW_GUARD|__COUNTER__|__cplusplus_cli|__cplusplus_winrt|_CPPRTTI|_CPPUNWIND|_DEBUG|_DLL|__FUNCDNAME__|__FUNCSIG__|__FUNCTION__|_INTEGRAL_MAX_BITS|__INTELLISENSE__|_ISO_VOLATILE|_KERNEL_MODE|_M_AMD64|_M_ARM|_M_ARM_ARMV7VE|_M_ARM_FP|_M_ARM64|_M_CEE|_M_CEE_PURE|_M_CEE_SAFE|_M_FP_EXCEPT|_M_FP_FAST|_M_FP_PRECISE|_M_FP_STRICT|_M_IX86|_M_IX86_FP|_M_X64|_MANAGED|_MSC_BUILD|_MSC_EXTENSIONS|_MSC_FULL_VER|_MSC_VER|_MSVC_LANG|__MSVC_RUNTIME_CHECKS|_MT|_NATIVE_WCHAR_T_DEFINED|_OPENMP|_PREFAST|__TIMESTAMP__|_VC_NO_DEFAULTLIB|_WCHAR_T_DEFINED|_WIN32|_WIN64|_WINRT_DLL|_ATL_VER|_MFC_VER|__GFORTRAN__|__GNUC__|__GNUC_MINOR__|__GNUC_PATCHLEVEL__|__GNUG__|__STRICT_ANSI__|__BASE_FILE__|__INCLUDE_LEVEL__|__ELF__|__VERSION__|__OPTIMIZE__|__OPTIMIZE_SIZE__|__NO_INLINE__|__GNUC_STDC_INLINE__|__CHAR_UNSIGNED__|__WCHAR_UNSIGNED__|__REGISTER_PREFIX__|__REGISTER_PREFIX__|__SIZE_TYPE__|__PTRDIFF_TYPE__|__WCHAR_TYPE__|__WINT_TYPE__|__INTMAX_TYPE__|__UINTMAX_TYPE__|__SIG_ATOMIC_TYPE__|__INT8_TYPE__|__INT16_TYPE__|__INT32_TYPE__|__INT64_TYPE__|__UINT8_TYPE__|__UINT16_TYPE__|__UINT32_TYPE__|__UINT64_TYPE__|__INT_LEAST8_TYPE__|__INT_LEAST16_TYPE__|__INT_LEAST32_TYPE__|__INT_LEAST64_TYPE__|__UINT_LEAST8_TYPE__|__UINT_LEAST16_TYPE__|__UINT_LEAST32_TYPE__|__UINT_LEAST64_TYPE__|__INT_FAST8_TYPE__|__INT_FAST16_TYPE__|__INT_FAST32_TYPE__|__INT_FAST64_TYPE__|__UINT_FAST8_TYPE__|__UINT_FAST16_TYPE__|__UINT_FAST32_TYPE__|__UINT_FAST64_TYPE__|__INTPTR_TYPE__|__UINTPTR_TYPE__|__CHAR_BIT__|__SCHAR_MAX__|__WCHAR_MAX__|__SHRT_MAX__|__INT_MAX__|__LONG_MAX__|__LONG_LONG_MAX__|__WINT_MAX__|__SIZE_MAX__|__PTRDIFF_MAX__|__INTMAX_MAX__|__UINTMAX_MAX__|__SIG_ATOMIC_MAX__|__INT8_MAX__|__INT16_MAX__|__INT32_MAX__|__INT64_MAX__|__UINT8_MAX__|__UINT16_MAX__|__UINT32_MAX__|__UINT64_MAX__|__INT_LEAST8_MAX__|__INT_LEAST16_MAX__|__INT_LEAST32_MAX__|__INT_LEAST64_MAX__|__UINT_LEAST8_MAX__|__UINT_LEAST16_MAX__|__UINT_LEAST32_MAX__|__UINT_LEAST64_MAX__|__INT_FAST8_MAX__|__INT_FAST16_MAX__|__INT_FAST32_MAX__|__INT_FAST64_MAX__|__UINT_FAST8_MAX__|__UINT_FAST16_MAX__|__UINT_FAST32_MAX__|__UINT_FAST64_MAX__|__INTPTR_MAX__|__UINTPTR_MAX__|__WCHAR_MIN__|__WINT_MIN__|__SIG_ATOMIC_MIN__|__SCHAR_WIDTH__|__SHRT_WIDTH__|__INT_WIDTH__|__LONG_WIDTH__|__LONG_LONG_WIDTH__|__PTRDIFF_WIDTH__|__SIG_ATOMIC_WIDTH__|__SIZE_WIDTH__|__WCHAR_WIDTH__|__WINT_WIDTH__|__INT_LEAST8_WIDTH__|__INT_LEAST16_WIDTH__|__INT_LEAST32_WIDTH__|__INT_LEAST64_WIDTH__|__INT_FAST8_WIDTH__|__INT_FAST16_WIDTH__|__INT_FAST32_WIDTH__|__INT_FAST64_WIDTH__|__INTPTR_WIDTH__|__INTMAX_WIDTH__|__SIZEOF_INT__|__SIZEOF_LONG__|__SIZEOF_LONG_LONG__|__SIZEOF_SHORT__|__SIZEOF_POINTER__|__SIZEOF_FLOAT__|__SIZEOF_DOUBLE__|__SIZEOF_LONG_DOUBLE__|__SIZEOF_SIZE_T__|__SIZEOF_WCHAR_T__|__SIZEOF_WINT_T__|__SIZEOF_PTRDIFF_T__|__BYTE_ORDER__|__ORDER_LITTLE_ENDIAN__|__ORDER_BIG_ENDIAN__|__ORDER_PDP_ENDIAN__|__FLOAT_WORD_ORDER__|__DEPRECATED|__EXCEPTIONS|__GXX_RTTI|__USING_SJLJ_EXCEPTIONS__|__GXX_EXPERIMENTAL_CXX0X__|__GXX_WEAK__|__NEXT_RUNTIME__|__LP64__|_LP64|__SSP__|__SSP_ALL__|__SSP_STRONG__|__SSP_EXPLICIT__|__SANITIZE_ADDRESS__|__SANITIZE_THREAD__|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16|__HAVE_SPECULATION_SAFE_VALUE|__GCC_HAVE_DWARF2_CFI_ASM|__FP_FAST_FMA|__FP_FAST_FMAF|__FP_FAST_FMAL|__FP_FAST_FMAF16|__FP_FAST_FMAF32|__FP_FAST_FMAF64|__FP_FAST_FMAF128|__FP_FAST_FMAF32X|__FP_FAST_FMAF64X|__FP_FAST_FMAF128X|__GCC_IEC_559|__GCC_IEC_559_COMPLEX|__NO_MATH_ERRNO__|__has_builtin|__has_feature|__has_extension|__has_cpp_attribute|__has_c_attribute|__has_attribute|__has_declspec_attribute|__is_identifier|__has_include|__has_include_next|__has_warning|__BASE_FILE__|__FILE_NAME__|__clang__|__clang_major__|__clang_minor__|__clang_patchlevel__|__clang_version__|__fp16|_Float16)\\b",
          "captures": {
            "1": {
              "name": "entity.name.other.preprocessor.macro.predefined.$1.c"
            }
          }
        },
        {
          "match": "\\b__([A-Z_]+)__\\b",
          "name": "entity.name.other.preprocessor.macro.predefined.probably.$1.c"
        }
      ]
    },
    "numbers": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "patterns": [
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.c"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.hexadecimal.c"
                    },
                    "5": {
                      "name": "constant.numeric.hexadecimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.hexadecimal.c"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.c"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.c"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.hexadecimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.c"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.point.c"
                    },
                    "5": {
                      "name": "constant.numeric.decimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "6": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "8": {
                      "name": "keyword.other.unit.exponent.decimal.c"
                    },
                    "9": {
                      "name": "keyword.operator.plus.exponent.decimal.c"
                    },
                    "10": {
                      "name": "keyword.operator.minus.exponent.decimal.c"
                    },
                    "11": {
                      "name": "constant.numeric.exponent.decimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "12": {
                      "name": "keyword.other.unit.suffix.floating-point.c"
                    }
                  }
                },
                {
                  "match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.binary.c"
                    },
                    "2": {
                      "name": "constant.numeric.binary.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.c"
                    }
                  }
                },
                {
                  "match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.octal.c"
                    },
                    "2": {
                      "name": "constant.numeric.octal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "4": {
                      "name": "keyword.other.unit.suffix.integer.c"
                    }
                  }
                },
                {
                  "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "1": {
                      "name": "keyword.other.unit.hexadecimal.c"
                    },
                    "2": {
                      "name": "constant.numeric.hexadecimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.hexadecimal.c"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.hexadecimal.c"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.hexadecimal.c"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.hexadecimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.c"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "3": {
                      "name": "punctuation.separator.constant.numeric"
                    },
                    "5": {
                      "name": "keyword.other.unit.exponent.decimal.c"
                    },
                    "6": {
                      "name": "keyword.operator.plus.exponent.decimal.c"
                    },
                    "7": {
                      "name": "keyword.operator.minus.exponent.decimal.c"
                    },
                    "8": {
                      "name": "constant.numeric.exponent.decimal.c",
                      "patterns": [
                        {
                          "match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
                          "name": "punctuation.separator.constant.numeric"
                        }
                      ]
                    },
                    "9": {
                      "name": "keyword.other.unit.suffix.integer.c"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
                  "name": "invalid.illegal.constant.numeric"
                }
              ]
            }
          ]
        }
      }
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.documentation.c",
          "while": "(?-mix:(?:^)(?>\\s*)(\\/\\/[!\\/]+))",
          "whileCaptures": {
            "1": {
              "name": "punctuation.definition.comment.continuation.documentation.c"
            }
          },
          "begin": "(\\/\\/[!\\/]+)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.documentation.c"
            }
          },
          "patterns": [
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "markup.italic.doxygen.c"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "markup.bold.doxygen.c"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "markup.inline.raw.string.c"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)\\s+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "variable.parameter.c"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.class.gtkdoc"
            },
            {
              "match": "[\\\\@]\\S++(?!(?:\\n|$))",
              "name": "invalid.unknown.documentation.command.c"
            }
          ]
        },
        {
          "match": "(\\/\\*[!*]+(?=\\s))(.+)([!*]*\\*\\/)",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation.c"
            },
            "2": {
              "patterns": [
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "markup.italic.doxygen.c"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "markup.bold.doxygen.c"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "markup.inline.raw.string.c"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]param)\\s+(\\b\\w+\\b)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "variable.parameter.c"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
                  "name": "storage.type.class.gtkdoc"
                },
                {
                  "match": "[\\\\@]\\S++(?!(?:\\n|$))",
                  "name": "invalid.unknown.documentation.command.c"
                }
              ]
            },
            "3": {
              "name": "punctuation.definition.comment.end.documentation.c"
            }
          },
          "name": "comment.block.documentation.c"
        },
        {
          "name": "comment.block.documentation.c",
          "begin": "(\\/\\*[!*]+(?:(?:\\n|$)|(?=\\s)))",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.documentation.c"
            }
          },
          "end": "([!*]*\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.documentation.c"
            }
          },
          "patterns": [
            {
              "while": "(?-mix:(?:^)(?>\\s*)(?![!*]*\\*\\/)((?>\\**)))",
              "whileCaptures": {
                "1": {
                  "name": "punctuation.definition.comment.continuation.documentation.c"
                }
              },
              "begin": "\\G",
              "patterns": [
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "markup.italic.doxygen.c"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "markup.bold.doxygen.c"
                    }
                  }
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "markup.inline.raw.string.c"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "((?<=[\\s*!\\/])[\\\\@]param)\\s+(\\b\\w+\\b)",
                  "captures": {
                    "1": {
                      "name": "storage.type.class.doxygen.c"
                    },
                    "2": {
                      "name": "variable.parameter.c"
                    }
                  }
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
                  "name": "storage.type.class.doxygen.c"
                },
                {
                  "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
                  "name": "storage.type.class.gtkdoc"
                },
                {
                  "match": "[\\\\@]\\S++(?!(?:\\n|$))",
                  "name": "invalid.unknown.documentation.command.c"
                }
              ]
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:callergraph|callgraph|else|endif|f\\$|f\\[|f\\]|hidecallergraph|hidecallgraph|hiderefby|hiderefs|hideinitializer|htmlinclude|n|nosubgrouping|private|privatesection|protected|protectedsection|public|publicsection|pure|showinitializer|showrefby|showrefs|tableofcontents|\\$|\\#|<|>|%|\"|\\.|=|::|\\||\\-\\-|\\-\\-\\-)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:a|em|e))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "markup.italic.doxygen.c"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]b)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "markup.bold.doxygen.c"
                }
              }
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@](?:c|p))\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "markup.inline.raw.string.c"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:a|anchor|b|c|cite|copybrief|copydetail|copydoc|def|dir|dontinclude|e|em|emoji|enum|example|extends|file|idlexcept|implements|include|includedoc|includelineno|latexinclude|link|memberof|namespace|p|package|ref|refitem|related|relates|relatedalso|relatesalso|verbinclude)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:addindex|addtogroup|category|class|defgroup|diafile|dotfile|elseif|fn|headerfile|if|ifnot|image|ingroup|interface|line|mainpage|mscfile|name|overload|page|property|protocol|section|skip|skipline|snippet|snippetdoc|snippetlineno|struct|subpage|subsection|subsubsection|typedef|union|until|vhdlflow|weakgroup)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "((?<=[\\s*!\\/])[\\\\@]param)\\s+(\\b\\w+\\b)",
              "captures": {
                "1": {
                  "name": "storage.type.class.doxygen.c"
                },
                "2": {
                  "name": "variable.parameter.c"
                }
              }
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:arg|attention|author|authors|brief|bug|copyright|date|deprecated|details|exception|invariant|li|note|par|paragraph|param|post|pre|remark|remarks|result|return|returns|retval|sa|see|short|since|test|throw|todo|tparam|version|warning|xrefitem)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "(?<=[\\s*!\\/])[\\\\@](?:code|cond|docbookonly|dot|htmlonly|internal|latexonly|link|manonly|msc|parblock|rtfonly|secreflist|uml|verbatim|xmlonly|endcode|endcond|enddocbookonly|enddot|endhtmlonly|endinternal|endlatexonly|endlink|endmanonly|endmsc|endparblock|endrtfonly|endsecreflist|enduml|endverbatim|endxmlonly)\\b(?:\\{[^}]*\\})?",
              "name": "storage.type.class.doxygen.c"
            },
            {
              "match": "(?:\\b[A-Z]+:|@[a-z_]+:)",
              "name": "storage.type.class.gtkdoc"
            },
            {
              "match": "[\\\\@]\\S++(?!(?:\\n|$))",
              "name": "invalid.unknown.documentation.command.c"
            }
          ]
        },
        {
          "match": "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.block.c"
            }
          },
          "name": "comment.block.banner.c"
        },
        {
          "name": "comment.block.c",
          "begin": "(\\/\\*)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.begin.c"
            }
          },
          "end": "(\\*\\/)",
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.comment.end.c"
            }
          }
        },
        {
          "match": "^\\/\\/ =(\\s*.*?)\\s*=$\\n?",
          "captures": {
            "1": {
              "name": "meta.toc-list.banner.line.c"
            }
          },
          "name": "comment.line.banner.c"
        },
        {
          "begin": "((?:^[ \\t]+)?)(?=\\/\\/)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.c"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-slash.c",
              "begin": "(\\/\\/)",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.definition.comment.c"
                }
              },
              "end": "(?=\\n)",
              "patterns": [
                {
                  "include": "#line_continuation_character"
                }
              ]
            }
          ]
        }
      ]
    },
    "probably_a_parameter": {
      "match": "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
      "captures": {
        "1": {
          "name": "variable.parameter.probably.c"
        }
      }
    },
    "access-method": {
      "name": "meta.function-call.member.c",
      "begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()",
      "beginCaptures": {
        "1": {
          "name": "variable.object.c"
        },
        "2": {
          "name": "punctuation.separator.dot-access.c"
        },
        "3": {
          "name": "punctuation.separator.pointer-access.c"
        },
        "4": {
          "patterns": [
            {
              "match": "\\.",
              "name": "punctuation.separator.dot-access.c"
            },
            {
              "match": "->",
              "name": "punctuation.separator.pointer-access.c"
            },
            {
              "match": "[a-zA-Z_][a-zA-Z_0-9]*",
              "name": "variable.object.c"
            },
            {
              "name": "everything.else.c",
              "match": ".+"
            }
          ]
        },
        "5": {
          "name": "entity.name.function.member.c"
        },
        "6": {
          "name": "punctuation.section.arguments.begin.bracket.round.function.member.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.arguments.end.bracket.round.function.member.c"
        }
      },
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "block": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "name": "meta.block.c",
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "block_innards": {
      "patterns": [
        {
          "include": "#preprocessor-rule-enabled-block"
        },
        {
          "include": "#preprocessor-rule-disabled-block"
        },
        {
          "include": "#preprocessor-rule-conditional-block"
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "#c_function_call"
        },
        {
          "name": "meta.initialization.c",
          "begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
          "beginCaptures": {
            "1": {
              "name": "variable.other.c"
            },
            "2": {
              "name": "punctuation.section.parens.begin.bracket.round.initialization.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.initialization.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "patterns": [
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "include": "#parens-block"
        },
        {
          "include": "$base"
        }
      ]
    },
    "c_function_call": {
      "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
      "end": "(?<=\\))(?!\\w)",
      "name": "meta.function-call.c",
      "patterns": [
        {
          "include": "#function-call-innards"
        }
      ]
    },
    "disabled": {
      "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
      "end": "^\\s*#\\s*endif\\b",
      "patterns": [
        {
          "include": "#disabled"
        },
        {
          "include": "#pragma-mark"
        }
      ]
    },
    "line_continuation_character": {
      "patterns": [
        {
          "match": "(\\\\)\\n",
          "captures": {
            "1": {
              "name": "constant.character.escape.line-continuation.c"
            }
          }
        }
      ]
    },
    "parens": {
      "name": "meta.parens.c",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.c"
        }
      },
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "parens-block": {
      "name": "meta.parens.block.c",
      "begin": "\\(",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.parens.begin.bracket.round.c"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.parens.end.bracket.round.c"
        }
      },
      "patterns": [
        {
          "include": "#block_innards"
        },
        {
          "match": "(?-mix:(?<!:):(?!:))",
          "name": "punctuation.range-based.c"
        }
      ]
    },
    "pragma-mark": {
      "captures": {
        "1": {
          "name": "meta.preprocessor.pragma.c"
        },
        "2": {
          "name": "keyword.control.directive.pragma.pragma-mark.c"
        },
        "3": {
          "name": "punctuation.definition.directive.c"
        },
        "4": {
          "name": "entity.name.tag.pragma-mark.c"
        }
      },
      "match": "^\\s*(((#)\\s*pragma\\s+mark)\\s+(.*))",
      "name": "meta.section.c"
    },
    "operators": {
      "patterns": [
        {
          "match": "(?<![\\w$])(sizeof)(?![\\w$])",
          "name": "keyword.operator.sizeof.c"
        },
        {
          "match": "--",
          "name": "keyword.operator.decrement.c"
        },
        {
          "match": "\\+\\+",
          "name": "keyword.operator.increment.c"
        },
        {
          "match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
          "name": "keyword.operator.assignment.compound.c"
        },
        {
          "match": "&=|\\^=|<<=|>>=|\\|=",
          "name": "keyword.operator.assignment.compound.bitwise.c"
        },
        {
          "match": "<<|>>",
          "name": "keyword.operator.bitwise.shift.c"
        },
        {
          "match": "!=|<=|>=|==|<|>",
          "name": "keyword.operator.comparison.c"
        },
        {
          "match": "&&|!|\\|\\|",
          "name": "keyword.operator.logical.c"
        },
        {
          "match": "&|\\||\\^|~",
          "name": "keyword.operator.c"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.c"
        },
        {
          "match": "%|\\*|/|-|\\+",
          "name": "keyword.operator.c"
        },
        {
          "begin": "(\\?)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "end": "(:)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        }
      ]
    },
    "string_escaped_char": {
      "patterns": [
        {
          "match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
          "name": "constant.character.escape.c"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unknown-escape.c"
        }
      ]
    },
    "string_placeholder": {
      "patterns": [
        {
          "match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
          "name": "constant.other.placeholder.c"
        },
        {
          "match": "(%)(?!\"\\s*(PRI|SCN))",
          "captures": {
            "1": {
              "name": "invalid.illegal.placeholder.c"
            }
          }
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "match": "(?-mix:(?<!\\w)(?:void|char|short|int|signed|unsigned|long|float|double|bool|_Bool)(?!\\w))",
          "name": "storage.type.built-in.primitive.c"
        },
        {
          "match": "(?-mix:(?<!\\w)(?:_Complex|_Imaginary|u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|div_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t|memory_order|atomic_bool|atomic_char|atomic_schar|atomic_uchar|atomic_short|atomic_ushort|atomic_int|atomic_uint|atomic_long|atomic_ulong|atomic_llong|atomic_ullong|atomic_char16_t|atomic_char32_t|atomic_wchar_t|atomic_int_least8_t|atomic_uint_least8_t|atomic_int_least16_t|atomic_uint_least16_t|atomic_int_least32_t|atomic_uint_least32_t|atomic_int_least64_t|atomic_uint_least64_t|atomic_int_fast8_t|atomic_uint_fast8_t|atomic_int_fast16_t|atomic_uint_fast16_t|atomic_int_fast32_t|atomic_uint_fast32_t|atomic_int_fast64_t|atomic_uint_fast64_t|atomic_intptr_t|atomic_uintptr_t|atomic_size_t|atomic_ptrdiff_t|atomic_intmax_t|atomic_uintmax_t)(?!\\w))",
          "name": "storage.type.built-in.c"
        },
        {
          "match": "(?-mix:\\b(enum|struct|union)\\b)",
          "name": "storage.type.$1.c"
        },
        {
          "name": "meta.asm.c",
          "begin": "(\\b(?:__asm__|asm)\\b)\\s*((?:volatile)?)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "storage.type.asm.c"
            },
            "2": {
              "name": "storage.modifier.c"
            },
            "3": {
              "name": "punctuation.section.parens.begin.bracket.round.assembly.c"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.bracket.round.assembly.c"
            }
          },
          "patterns": [
            {
              "name": "string.quoted.double.c",
              "contentName": "meta.embedded.assembly.c",
              "begin": "(R?)(\")",
              "beginCaptures": {
                "1": {
                  "name": "meta.encoding.c"
                },
                "2": {
                  "name": "punctuation.definition.string.begin.assembly.c"
                }
              },
              "end": "(\")",
              "endCaptures": {
                "1": {
                  "name": "punctuation.definition.string.end.assembly.c"
                }
              },
              "patterns": [
                {
                  "include": "source.asm"
                },
                {
                  "include": "source.x86"
                },
                {
                  "include": "source.x86_64"
                },
                {
                  "include": "source.arm"
                },
                {
                  "include": "#backslash_escapes"
                },
                {
                  "include": "#string_escaped_char"
                },
                {
                  "match": "(?=not)possible"
                }
              ]
            },
            {
              "begin": "(\\()",
              "beginCaptures": {
                "1": {
                  "name": "punctuation.section.parens.begin.bracket.round.assembly.inner.c"
                }
              },
              "end": "(\\))",
              "endCaptures": {
                "1": {
                  "name": "punctuation.section.parens.end.bracket.round.assembly.inner.c"
                }
              },
              "patterns": [
                {
                  "include": "#evaluation_context"
                }
              ]
            },
            {
              "match": ":",
              "name": "punctuation.separator.delimiter.colon.assembly.c"
            },
            {
              "include": "#comments_context"
            },
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "vararg_ellipses": {
      "match": "(?<!\\.)\\.\\.\\.(?!\\.)",
      "name": "punctuation.vararg-ellipses.c"
    },
    "preprocessor-rule-conditional": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#preprocessor-rule-enabled-elif"
            },
            {
              "include": "#preprocessor-rule-enabled-else"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.c"
            }
          }
        }
      ]
    },
    "preprocessor-rule-conditional-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if(?:n?def)?\\b)",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block"
            },
            {
              "include": "#preprocessor-rule-enabled-else-block"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#block_innards"
            }
          ]
        },
        {
          "match": "^\\s*#\\s*(else|elif|endif)\\b",
          "captures": {
            "0": {
              "name": "invalid.illegal.stray-$1.c"
            }
          }
        }
      ]
    },
    "preprocessor-rule-conditional-line": {
      "patterns": [
        {
          "match": "(?:\\bdefined\\b\\s*$)|(?:\\bdefined\\b(?=\\s*\\(*\\s*(?:(?!defined\\b)[a-zA-Z_$][\\w$]*\\b)\\s*\\)*\\s*(?:\\n|//|/\\*|\\?|\\:|&&|\\|\\||\\\\\\s*\\n)))",
          "name": "keyword.control.directive.conditional.c"
        },
        {
          "match": "\\bdefined\\b",
          "name": "invalid.illegal.macro-name.c"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "begin": "\\?",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "end": ":",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.ternary.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#operators"
        },
        {
          "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
          "name": "constant.language.c"
        },
        {
          "match": "[a-zA-Z_$][\\w$]*",
          "name": "entity.name.function.preprocessor.c"
        },
        {
          "include": "#line_continuation_character"
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "\\)|(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preprocessor-rule-enabled-elif"
            },
            {
              "include": "#preprocessor-rule-enabled-else"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.c",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line"
                    }
                  ]
                },
                {
                  "include": "$base"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "include": "#preprocessor-rule-enabled-elif-block"
            },
            {
              "include": "#preprocessor-rule-enabled-else-block"
            },
            {
              "include": "#preprocessor-rule-disabled-elif"
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
              "patterns": [
                {
                  "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
                  "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
                  "name": "meta.preprocessor.c",
                  "patterns": [
                    {
                      "include": "#preprocessor-rule-conditional-line"
                    }
                  ]
                },
                {
                  "include": "#block_innards"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-disabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0+\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*(?:elif|else|endif)\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
          "contentName": "comment.block.preprocessor.elif-branch.c",
          "patterns": [
            {
              "include": "#disabled"
            },
            {
              "include": "#pragma-mark"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            },
            "3": {
              "name": "constant.numeric.preprocessor.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.else-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "$base"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-block": {
      "patterns": [
        {
          "begin": "^\\s*((#)\\s*if\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
          "beginCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "end": "^\\s*((#)\\s*endif\\b)",
          "endCaptures": {
            "0": {
              "name": "meta.preprocessor.c"
            },
            "1": {
              "name": "keyword.control.directive.conditional.c"
            },
            "2": {
              "name": "punctuation.definition.directive.c"
            }
          },
          "patterns": [
            {
              "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
              "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?=\\n)",
              "name": "meta.preprocessor.c",
              "patterns": [
                {
                  "include": "#preprocessor-rule-conditional-line"
                }
              ]
            },
            {
              "include": "#comments"
            },
            {
              "begin": "^\\s*((#)\\s*else\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.else-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*elif\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.if-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "\\n",
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "patterns": [
                {
                  "include": "#block_innards"
                }
              ]
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-elif": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "include": "$base"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-elif-block": {
      "begin": "^\\s*((#)\\s*elif\\b)(?=\\s*\\(*\\b0*1\\b\\)*\\s*(?:$|//|/\\*))",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "begin": "\\G(?=.)(?!//|/\\*(?!.*\\\\\\s*\\n))",
          "end": "(?=//)|(?=/\\*(?!.*\\\\\\s*\\n))|(?<!\\\\)(?=\\n)",
          "name": "meta.preprocessor.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-conditional-line"
            }
          ]
        },
        {
          "include": "#comments"
        },
        {
          "begin": "\\n",
          "end": "(?=^\\s*((#)\\s*(?:endif)\\b))",
          "patterns": [
            {
              "begin": "^\\s*((#)\\s*(else)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*endif\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.in-block.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "begin": "^\\s*((#)\\s*(elif)\\b)",
              "beginCaptures": {
                "0": {
                  "name": "meta.preprocessor.c"
                },
                "1": {
                  "name": "keyword.control.directive.conditional.c"
                },
                "2": {
                  "name": "punctuation.definition.directive.c"
                }
              },
              "end": "(?=^\\s*((#)\\s*(?:else|elif|endif)\\b))",
              "contentName": "comment.block.preprocessor.elif-branch.c",
              "patterns": [
                {
                  "include": "#disabled"
                },
                {
                  "include": "#pragma-mark"
                }
              ]
            },
            {
              "include": "#block_innards"
            }
          ]
        }
      ]
    },
    "preprocessor-rule-enabled-else": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    "preprocessor-rule-enabled-else-block": {
      "begin": "^\\s*((#)\\s*else\\b)",
      "beginCaptures": {
        "0": {
          "name": "meta.preprocessor.c"
        },
        "1": {
          "name": "keyword.control.directive.conditional.c"
        },
        "2": {
          "name": "punctuation.definition.directive.c"
        }
      },
      "end": "(?=^\\s*((#)\\s*endif\\b))",
      "patterns": [
        {
          "include": "#block_innards"
        }
      ]
    },
    "preprocessor-rule-define-line-contents": {
      "patterns": [
        {
          "include": "#vararg_ellipses"
        },
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "name": "meta.block.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks"
            }
          ]
        },
        {
          "match": "\\(",
          "name": "punctuation.section.parens.begin.bracket.round.c"
        },
        {
          "match": "\\)",
          "name": "punctuation.section.parens.end.bracket.round.c"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas|asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\s*\\()\n(?=\n  (?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n  |\n  (?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
          "end": "(?<=\\))(?!\\w)|(?<!\\\\)(?=\\s*\\n)",
          "name": "meta.function.c",
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "\"|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.double.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#string_placeholder"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.c"
            }
          },
          "end": "'|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.c"
            }
          },
          "name": "string.quoted.single.c",
          "patterns": [
            {
              "include": "#string_escaped_char"
            },
            {
              "include": "#line_continuation_character"
            }
          ]
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "$base"
        }
      ]
    },
    "preprocessor-rule-define-line-blocks": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.block.begin.bracket.curly.c"
            }
          },
          "end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.block.end.bracket.curly.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-blocks"
            },
            {
              "include": "#preprocessor-rule-define-line-contents"
            }
          ]
        },
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    "preprocessor-rule-define-line-functions": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.c"
            }
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.arguments.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "(\\))|(?<!\\\\)(?=\\s*\\n)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#preprocessor-rule-define-line-functions"
            }
          ]
        },
        {
          "include": "#preprocessor-rule-define-line-contents"
        }
      ]
    },
    "function-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#vararg_ellipses"
        },
        {
          "name": "meta.function.definition.parameters.c",
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.parameters.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parameters.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#probably_a_parameter"
            },
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-innards"
            }
          ]
        },
        {
          "include": "$base"
        }
      ]
    },
    "function-call-innards": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#method_access"
        },
        {
          "include": "#member_access"
        },
        {
          "include": "#operators"
        },
        {
          "begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|enumerate|return|typeid|alignof|alignas|sizeof|[cr]?iterate|and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.c"
            },
            "2": {
              "name": "punctuation.section.arguments.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.arguments.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.parens.begin.bracket.round.c"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.parens.end.bracket.round.c"
            }
          },
          "patterns": [
            {
              "include": "#function-call-innards"
            }
          ]
        },
        {
          "include": "#block_innards"
        }
      ]
    }
  },
  "name": "C0"
}